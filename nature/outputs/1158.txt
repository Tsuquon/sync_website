an intuitive approach to computer modelling could reveal paths to discovery, finds lucas laursen.you have full access to this article via your institution.grabbing one of the three laptops in her office at microsoft research in cambridge, uk, jasmin fisher flips open the lid and starts to describe how she and her collaborators used an approach from computer science to make a discovery in molecular biology.fisher glances across her desk to where her collaborator, nir piterman of imperial college london, is watching restlessly. "i know you could do this faster," she says to piterman, who is also her husband. "but you are a computer scientist and i am a biologist and we must be patient."after a few moments, patience is rewarded: fisher pulls up a screen of what looks like programming code. pointing to a sequence of lines highlighted in red, she explains that it is a warning generated by software originally developed for finding flaws in microchip circuitry. in 2007, she, piterman and their colleagues found a similar alert in a simulation they had devised for signalling pathways in the nematode worm caenorhabditis elegans. using that as a clue, they predicted and then experimentally verified the existence of a mutation that disrupts normal cell growth1.'executable biology', as fisher calls what she's demonstrating, is an emerging approach to biological modelling that, its proponents say, could make simulations of cells and their components easier for researchers to build, understand and verify experimentally.the screen full of code doesn't look especially intuitive to a non-programmer. but fisher toggles to another window that shows the same c. elegans simulation expressed graphically. it now looks much more like the schematic diagrams of cell–cell interactions and cellular pathways that biologists often sketch on white boards, in notebooks or even on cocktail napkins. one big goal of executable biology is to make model-building as easy as sketching. fisher explains that each piece of biological knowledge pictured on the screen, such as the fact that the binding of one protein complex to another is necessary to activate a certain signal, corresponds to a programming statement on the first screen. likewise, the diagram as a whole — illustrating, say, a regulatory pathway — corresponds to a sequence of statements that collectively function as a computer simulation. ultimately, she says, this kind of software should develop to a point at which researchers can draw a hypothetical pathway or interaction on the screen in exactly the way they're already used to doing, and have the computer automatically convert their drawing into a working simulation. the results of that simulation would then show the researchers whether or not their hypothesis corresponds to actual cell behaviour, and perhaps — as happened in the 2007 work — make predictions that suggest fruitful new experiments.modelling in general is regarded sceptically by many biologists. stephen oliver , in the meantime, however, fisher and her fellow executable-biology enthusiasts have a lot of convincing to do, says stephen oliver, a biologist at the university of cambridge, uk. "modelling in general is regarded sceptically by many biologists," he points out.  born-again modeller  fisher's fascination with this type of modelling started in about 2000. she was studying for her phd in neuroimmunology at the weizmann institute of science in rehovot, israel, when she encountered david harel, a computer scientist who was applying computational ideas to biology.harel wanted to get around the problems encountered in conventional simulations, which use reaction-rate equations and other tools of theoretical chemistry to describe, step by step, how reaction networks and cell interactions change over time. such simulations can provide biologists with a gratifying level of detail for testing against reality. but the number of differential equations in these models escalates rapidly as more reactions are included, until they become a strain on even the most powerful computers. in one recent model of the networks involving epidermal growth factor, for example, 499 equations were required to describe 828 possible reactions2. even if the computers can handle such a load, the output is often difficult to interpret.such models quickly become "an impossibly unwieldy black box", says vincent danos, a computational biologist at the university of edinburgh, uk. and if the models have such a hard time simulating the behaviour of a single set of signalling pathways, he adds, then it's hard to imagine they will ever be of much use in systems biology, which might, for example, seek to understand all the pathways in a cell as an integrated whole.harel's approach was to represent networks of biological events by a considerably smaller set of logical statements. for example, instead of specifying the number of signal molecules involved in a particular cell–cell interaction, or the sensitivity of the various receptors, a statement might simply say 'when cell x is near cell y for long enough, cell y switches from one type of behaviour to another'. and, unlike the conventional equations, the rules tend to be independent of one another — an important part of why the simulations are so much easier to build.an additional advantage of the logic-based approach was that standard model-checking algorithms — widely used by industry for testing computer hardware — could check whether the statements were logically consistent, and capable of producing the behaviour seen in cells. this analysis would highlight points in the model at which the behaviour was going awry, which in turn might suggest experiments to look for previously unsuspected reactions and molecular species at that point (see graphic).fisher became so caught up in the idea that in 2003 she joined harel's lab as a postdoc. she continued to work in the field during a three-year postdoc appointment under thomas henzinger at the computer-science department of the swiss federal institute in lausanne (epfl). piterman, whom she had married in 1998, came to the epfl as well, and the three of them collaborated with their colleague alex hajnal to build the c. elegans model.they started by recording all the rules they could find in the literature pertaining to the maturation of a simple, well-studied system of six vulval precursor cells. "i wrote it all down first in a diagram," says fisher, pointing to a figure in a research article on her desk, "then we formalized all the arrows and feedback loops into the computer program." because the model needed only rules, not numbers, most of the information was qualitative (for example, this cell is closest to the cell sending the signal so the messenger molecules reach it first).  lab confirmation  the team knew that genetic mutations could nudge the cells into different roles during maturation, but they wanted to know more about the cascade of signals that dictate the fate of each cell. the model-checker explored the set of 48 mutations known to affect vulval development, which could have up to 92,000 possible outcomes. all but four of the perturbations predicted normal cell fates, so the team concentrated on simulating different timings of those four cases. they found two previously unknown effects. first, a set of inhibitory genes collectively known as lst genes have to be activated for vulval cells to convert to their 'primary' fate, meaning that their daughter cells will make up the vulval opening. second, if another gene was disrupted and signals between the cells weren't timed just in just the right sequence, the cell would adopt a different fate. a laboratory experiment confirmed both predictions."we used this qualitative model because we simply didn't have the quantitative knowledge," says fisher. but now that the approach and its predictions have been verified in the lab, she says, "you can't argue with it".the model is not an oracle, it is an automation of your understanding. john heath , since then, fisher has become one of the world's most energetic proponents of executable biology3, but she is far from being the only enthusiast. in 2007, for example, biologist john heath of the university of birmingham, uk, was trying to model signal transduction pathways and protein–protein interactions. "the processes are just really just too complicated to understand using intuition," he says. he discussed his problem with university of oxford computer scientist marta kwiatkowska, who was then working in the adjacent building at birmingham, and she gave him a paper on model-checking. "i was reading the opening paragraph on the train and i thought, 'this is exactly what i want'," says heath. in collaboration with corrado priami, who leads the centre for computational and systems biology at the university of trento in italy, heath was soon modelling the gp130/jak/stat signalling pathway4, a well-studied system involved in human fertility, neuronal repair and embryonic stem-cell renewal. their model reproduced the dynamic behaviour of the pathway as observed in the laboratory, and has allowed them to make testable predictions about which parts of the pathway are most sensitive to mutation or other perturbation. heath, like fisher, is now actively promoting executable biology, and has joined with kwiatowska to publish a review paper on the approach5.  another level  executable biology does have limitations, fisher acknowledges. at present, for example, such models can handle only one level of narrowly defined biological activity at a time — the level of protein–protein interaction, say, or the level of cell–cell interaction. "we know there is feedback between the levels," fisher says, "but we don't know enough about it" to get a computer to simulate that feedback.an additional complication is that the different levels are best handled by different computer languages. to model the molecules that travel between cells, for instance, the most natural languages are those known in computer science as 'process calculi', which were devised to model information flow through communication webs. but to model the behaviour of an individual cell and its components, as in the various signalling and regulatory pathways, the most natural languages are those based on the theory of interacting 'state machines', which was developed to describe how objects transition from one state to another.the long-term goal, says fisher, is to develop more sophisticated and complete simulations that would help researchers explore a wider range of biological phenomena, both by integrating behaviour at the genetic, molecular and cellular levels, and by integrating executable models with more mathematical models. indeed, as a group of bioengineers led by c. anthony hunt of the university of california, san francisco, pointed out in a response6 to fisher and henzinger's 2007 review, it's not an either–or choice between the executable biology and conventional mathematical modelling: both have their uses and limitations, depending on the level of biological activity being simulated.fully integrated modelling is still a long way off, admits fisher. but now that executable-biology predictions have been verified in the lab, the field has begun to attract more attention. labs worldwide are starting to use executable biology to study systems, and fisher herself is giving invited lectures on the subject 15–18 times per year around the world.meanwhile, she and piterman are trying to make the software more accessible to biologists, so that researchers can make executable-biology simulations a routine part of their work. other research groups are working towards the same end. priami's group is trying to write interfaces so simple that biologists can fill in tables with their data, specify the rules they want to use in spatially organized diagrams and sit back while the program translates the data into a computer-readable language that can execute a simulation7. "we develop languages that allow people to program without knowing they are programming," says priami.  commercial efforts in another effort to make the executable-biology approach more intuitive, walter fontana of the harvard medical school in boston, massachusetts, has joined with colleagues at the start-up firm plectix to launch cellucidate, an online visual interface for biological-pathway modelling that generates statements in an executable computer language called kappa, which fontana developed explicitly to model molecular interactions. cellucidate — available for free during its trial period — allows collaborators to add information to a shared online model and revise it wikipedia-style, something fontana says is increasingly important because the empirical facts on which models are based are continually being revised.fisher hopes that the excitement will catch on in more groups and suggests that some of the computer-inspired ideas she is testing in her group's latest in vivo experiments, which now extend to fruitflies and yeast cells, should entice more interest in executable biology among lab-based biologists.but in the end, fisher emphasizes, the fact that using executable rules could make the models easier to visualize is only an added bonus. executable biology's real pay-off is that it can help biologists to understand the complexity of living things, whether at the level of groups of molecules, such as kappa describes, or at that of signals sent between cells, as in the nematodes fisher herself studies. and that enhanced understanding, in turn, helps biologists ask new questions, design new experiments and make new discoveries. "but however good the models are, "you still need a good scientist to implement them", says kwiatkowska."the model is not an oracle," heath agrees, "it's an automation of your understanding."fisher, j., piterman, n., hajnal, a. & henzinger, t. a. plos comput. biol. 3, e92 (2007).ads article google scholar chen w. w. et al. mol. syst. biol. 5, 239 (2009). google scholar fisher, j. & henzinger, t. a. nature biotechnol. 25, 1239-1249 (2007).cas article google scholar guerriero, m. l., dudka, a., underhill-day, n., heath, j. k. & priami, c. bmc syst. biol. 3, 40 (2009).article google scholar kwiatkowska, m. z. & heath, j. k. j. cell sci. 122, 2793-2800 (2009).cas article google scholar hunt, c. a., ropella, g. e. p., park, s. & engelberg, j. nature biotechnol. 26, 737-738 (2008).cas article google scholar priami, c. commun. acm 52, 80-88 (2009).article google scholar download referencesyou can also search for this author in pubmed google scholarlucas laursen is a freelance journalist in cambridge, uk. review in nature biotechnology  letter in nature biotechnology  egf model in molecular systems biology  jasmin fisher's web site  john heath's web site  corrado priami's web site  cellucidate web site reprints and permissionslaursen, l. computational biology: biological logic. nature 462, 408–410 (2009). https://doi.org/10.1038/462408adownload citationpublished: 25 november 2009issue date: 26 november 2009doi: https://doi.org/10.1038/462408aanyone you share the following link with will be able to read this content:sorry, a shareable link is not currently available for this article. provided by the springer nature sharedit content-sharing initiative bmc systems biology (2012)frontiers in biology (2011)