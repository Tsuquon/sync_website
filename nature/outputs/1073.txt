…why scientific programming does not compute.when hackers leaked thousands of e-mails from the climatic research unit (cru) at the university of east anglia in norwich, uk, last year, global-warming sceptics pored over the documents for signs that researchers had manipulated data. no such evidence emerged, but the e-mails did reveal another problem — one described by a cru employee named "harry", who often wrote of his wrestling matches with wonky computer software."yup, my awful programming strikes again," harry lamented in one of his notes, as he attempted to correct a code analysing weather-station data from mexico.although harry's frustrations did not ultimately compromise cru's work, his difficulties will strike a chord with scientists in a wide range of disciplines who do a large amount of coding. researchers are spending more and more time writing computer software to model biological structures, simulate the early evolution of the universe and analyse past climate data, among other topics. but programming experts have little faith that most scientists are up to the task.a quarter of a century ago, most of the computing work done by scientists was relatively straightforward. but as computers and programming tools have grown more complex, scientists have hit a "steep learning curve", says james hack, director of the us national center for computational sciences at oak ridge national laboratory in tennessee. "the level of effort and skills needed to keep up aren't in the wheelhouse of the average scientist."as a general rule, researchers do not test or document their programs rigorously, and they rarely release their codes, making it almost impossible to reproduce and verify published results generated by scientific software, say computer scientists. at best, poorly written programs cause researchers such as harry to waste valuable time and energy. but the coding problems can sometimes cause substantial harm, and have forced some scientists to retract papers.as recognition of these issues has grown, software experts and scientists have started exploring ways to improve the codes used in science. some efforts teach researchers important programming skills, whereas others encourage collaboration between scientists and software engineers, and teach researchers to be more open about their code.  a proper education  greg wilson, a computer scientist in toronto, canada, who heads software carpentry — an online course aimed at improving the computing skills of scientists — says that he woke up to the problem in the 1980s, when he was working at a physics supercomputing facility at the university of edinburgh, uk. after a series of small mishaps, he realized that, without formal training in programming, it was easy for scientists trying to address some of the universe's biggest questions to inadvertently introduce errors into their codes, potentially "doing more harm than good".after decades griping about the poor coding skills of scientists he knew, wilson decided to see how widespread the problem was. in 2008, he and his colleagues conducted an online survey of almost 2,000 researchers, from students to senior academics, who were working with computers in a range of sciences. what he found was worse than he had anticipated1 (see 'scientists and their software'). "there are terrifying statistics showing that almost all of what scientists know about coding is self-taught," says wilson. "they just don't know how bad they are." click here for larger image as a result, codes may be riddled with tiny errors that do not cause the program to break down, but may drastically change the scientific results that it spits out. one such error tripped up a structural-biology group led by geoffrey chang of the scripps research institute in la jolla, california. in 2006, the team realized that a computer program supplied by another lab had flipped a minus sign, which in turn reversed two columns of input data, causing protein crystal structures that the group had derived to be inverted. chang says that the other lab provided the code with the best intentions, and "you just trust the code to do the right job". his group was forced to retract five papers published in science, the journal of molecular biology and proceedings of the national academy of sciences, and now triple checks everything, he says."how many fields have been held back, and how many people have had their careers disrupted, because of a buggy program?" asks wilson.more-rigorous testing could help. diane kelly, a computer scientist at the royal military college of canada in kingston, ontario, says the problem is that scientists rely on "validation testing" — looking to see whether the answer that the code produces roughly matches what the scientists expect — and this can miss important errors2. the software industry relies on a different approach: breaking codes into manageable chunks and testing each piece individually, then visually inspecting the lines of code that stitch these chunks together (see 'practicing safe software'). click here for larger image many programmers in industry are also trained to annotate their code clearly, so that others can understand its function and easily build on it. but scientists often lack these communication and documentation skills. even if researchers lift a whole working code and reuse it, rather than writing their own, they can apply the program incorrectly if it lacks clear documentation. aaron darling, a computational biologist at the university of california, davis, unwittingly caused such a mistake with his own computer code for comparing genomes to reconstruct evolutionary relationships. he had designed the program to work only with closely related organisms, but discovered that an independent group had used it to look at sequences far outside the code's working range."it was lucky that i came across it, because their published results were totally wrong, but they couldn't know that because i hadn't clearly documented how my code worked," says darling. "it's not something that i am proud of, but i am careful to be more clear now."  slaying the monster  problems created by bad documentation are further amplified when successful codes are modified by others to fit new purposes. the result is the bane of many a graduate student or postdoc's life: the 'monster code'. sometimes decades old, these codes are notoriously messy and become progressively more nightmarish to handle, say computer scientists."you do have some successes, but you also end up with a huge stinking heap of software that doesn't work very well," says darling.the mangled coding of these monsters can sometimes make it difficult to check for errors. one example is a piece of code written to analyse the products of high-energy collisions at the large hadron collider particle accelerator at cern, europe's particle-physics laboratory near geneva, switzerland. the code had been developed over more than a decade by 600 people, "some of whom are excellent programmers and others who do not really know how to code very well", says david rousseau, software coordinator for the atlas experiment at cern. wilson and his students tried to test the program, but they could not get very far: the code would not even run on their machines.rousseau says that the atlas group can test the software only on the linux operating system at the moment, but is striving to make the code compatible with mac computers. this is important, he says, "because different platforms expose different types of errors that may otherwise be overlooked".some software developers have found ways to combat the growth of monster code. one example is the visualization toolkit, an open-source, freely available software system for three-dimensional computer graphics. people can modify the software as they wish, and it is rerun each night on every computing platform that supports it, with the results published on the web. the process ensures that the software will work the same way on different systems.that kind of openness has yet to infiltrate the scientific research world, where many leading science journals, including nature, science and proceedings of the national academy of sciences, do not insist that authors make their code available. rather, they require that authors provide enough information for results to be reproduced.  the search for solutions  in november 2009, a group of scientists, lawyers, journal editors, and funding representatives gathered for the yale law school data and code sharing roundtable in new haven, connecticut, where they recommended that scientists go further by providing links to the source-code and the data used to generate results when publishing. although a step in the right direction, such requirements don't always solve the problem. since 1996, the journal of money, credit and banking has required researchers to upload their codes and data to an archive. but a 2006 study revealed that of 150 papers submitted to the journal over the preceding decade that fell under this requirement, results could be independently replicated with the materials provided for fewer than 15 (ref. 3).proponents of openness argue that researchers seeking to replicate published results need access to the original software, but others say that more transparency may not help much. martin rees, president of the royal society in london, says it would be too much to ask reviewers to check code line by line. and in his own field of astrophysics, results can really be trusted only in cases in which a number of different groups have written independent codes to perform the same task and found similar results. still, he acknowledges that "how to trust unique codes remains an issue".there are signs that scientific leaders are now taking notice of these concerns. in 2009, the uk engineering and physical sciences research council put out a call for help for scientists trying to create usable software, which led to the formation of the software sustainability institute (ssi) at the university of edinburgh. the ssi unites trained software developers with scientists to help them add new lines to existing codes, allowing them to tackle extra tasks without the programs turning into monsters. they also try to share their products across disciplines, says neil chue hong, the ssi's director. for instance, they recently helped build a code to query clinical records and help monitor the spread of disease. they are now sharing the structure of that code with researchers who are trying to use police records to identify crime hot spots. "it stops researchers wasting time reinventing the wheel for each new application," says chue hong.could your code stand up to attack? , another solution is to bring trained computer scientists into research groups, either permanently or as part of temporary alliances. software developer nick barnes has set up the climate code foundation, based in sheffield, uk, to help climate researchers. he was motivated by problems with nasa's surface temperature analysis software, which was released to the public in 2007. critics complained that the program, written in the scientific programming language fortran, would not work on their machines and they could therefore not trust what it said about global warming. in consultation with nasa researchers, barnes rewrote the code in a newer, more transparent programming language — python — reducing its length and making it easier for people who aren't software experts to understand how it functions. "because of the immense public interest and the important policy issues at stake, it was worth taking the time to do that," says barnes. his new code shows the same general warming trend as the original program.in the long term, though, barnes says that there needs to be a change in the way that science students are trained. he cites wilson's online software carpentry course as a good model for how this can be done, to equip students with coding skills. wilson developed the week-long course to introduce science graduate students to tools that have been software-industry standards for 30 years — such as 'version control', which allows multiple programmers to make changes to the same code, while keeping track of all changes.science administrators also need to value programming skills more highly, says david gavaghan, a computational biologist at the university of oxford, uk. "there needs to be a real shift in mindset away from worrying about how to get published in nature and towards thinking about how to reward work that will be useful to the wider community."gavaghan now uses the software industry's 'master–apprentice' approach to train graduate students in his lab. new software projects are split up into bite-sized chunks, with each segment assigned to a pair of programmers — one experienced and one novice — who work together on it. "it forces students to become consistent code-builders," says gavaghan.bringing industrial software-development practices into the lab cannot come too soon, says wilson. the cru e-mail affair was a warning to scientists to get their houses in order, he says. "to all scientists out there, ask yourselves what you would do if, tomorrow, some republican senator trains the spotlight on you and decides to turn you into a political football. could your code stand up to attack?"hannay, j. e. et al. proc. 2nd int. workshop on software engineering for computational science and engineering (2009).kelly, d. ieee software 24, 119-120 (2007).article google scholar mccullough, b. d., mcgeary, k. a. & harrison, t. d, j. money credit banking 38, 1093-1107 (2006).article google scholar download referenceszeeya merali is a freelance writer in london., zeeya meraliyou can also search for this author in pubmed google scholar see world view, p.753  yale law school data and code sharing roundtable  the software sustainability institute  greg wilson's software carpentry website reprints and permissionsmerali, z. computational science: ...error. nature 467, 775–777 (2010). https://doi.org/10.1038/467775adownload citationpublished: 13 october 2010issue date: 14 october 2010doi: https://doi.org/10.1038/467775aanyone you share the following link with will be able to read this content:sorry, a shareable link is not currently available for this article. provided by the springer nature sharedit content-sharing initiative journal of geographical systems (2021)nature physics (2019)minds and machines (2019)the journal of supercomputing (2018)software & systems modeling (2018)