when ensheng dong co-created the johns hopkins university covid‑19 dashboard in january 2020, it was a labour of love. dong, a systems engineer at the university in baltimore, maryland, had friends and family in china, including some in wuhan, the site of the initial outbreak. i really wanted to see what was going on in their area, he says. so dong began collecting public-health data from the cities known to be affected.at first, the work was manual. but as the outbreak became a pandemic, and the covid-19 dashboard became the go-to source for governments and scientists seeking information on the spread of the disease, dong and his colleagues struggled to keep up. in the united states alone, the team was tracking medical reports from more than 3,000 counties, he says. we were updating at least three to four times a day, he recalls, and there was no way the team could keep up that relentless pace manually. fortunately, he and his graduate adviser, systems engineer lauren gardner, found a more scalable solution: web scraping.scraping algorithms pluck out relevant information from websites and report it in a spreadsheet or other user-friendly format. dong and his colleagues developed a system that could capture covid-19 data from around the world and update the numbers without human intervention. for the first time in human history, we can track what’s going on with a global pandemic in real time, he says.similar tools are harvesting data across a range of disciplines. alex luscombe, a criminologist at the university of toronto in canada, uses scraping to monitor canadian law-enforcement practices; phill cassey, a conservation biologist at the university of adelaide, australia, tracks the global wildlife trade on internet forums; and georgia richards, an epidemiologist at the university of oxford, uk, scans coroners’ reports for preventable causes of death. the technical skill required isn’t trivial, but neither is it overwhelming — and the benefits can be immense, enabling researchers to collect large quantities of data rapidly without the errors inherent to manual transcription. there’s so many resources and so much information available online, richards says. it’s just sitting there waiting for someone to come and make use of it.modern web browsers are sufficiently polished that it’s easy to forget their underlying complexity. websites blend code written in languages such as html and javascript to define where various text and visual elements will appear on the page, including both ‘static’ (fixed) content and ‘dynamic’ content that changes in response to user action. eleven tips for working with large data setssome scientific databases, such as pubmed, and social networks, such as twitter, provide application programming interfaces (apis) that offer controlled access to these data. but for other sites, what you see is what you get, and the only way to turn website data into something you can work with is by laboriously copying the visible text, images and embedded files. even if an api exists, websites might limit which data can be obtained and how often.scrapers offer an efficient alternative. after being ‘trained’ to focus on particular elements on the page, these programs can collect data manually or automatically, and even on a schedule. commercial tools and services often include user-friendly interfaces that simplify the selection of web-page elements to target. some, such as the web scraper or data miner web browser extensions, enable free manual or automated scraping from small numbers of pages. but scaling up can get pricey: services such as mozenda and scrapesimple charge a minimum of us$250 per month for scraping-based projects. these tools might also lack the flexibility needed to tackle diverse websites.as a result, many academics prefer open-source alternatives. the beautiful soup package, which extracts information from html and xml files, and selenium, which can also handle dynamic javascript content, are compatible with the python programming language; rvest and rselenium provide analogous functionality for r, another language. but these software libraries typically provide only the building blocks; researchers must customize their code for each website. we worked with some of the pre-existing tools, and then we modified them, says cassey of the scrapers he developed. they’ve become increasingly bespoke through time.simple web-scraping projects require relatively modest coding skills. richards says her team resolves most problems by googling how to fix an error. but a good understanding of web design and coding fundamentals confers a valuable edge, she adds.i mostly use developer mode now, says luscombe, referring to the browser setting that allows users to peel away a website’s familiar façade to get at the raw html and other programming code below. but there are tools that can help, including the selectorgadget browser extension, which provides a user-friendly interface to identify the ‘tags’ associated with specific website elements. how to fix your scientific coding errorsthe complexity of a scraping project is largely determined by the site being targeted. forums typically have fairly standard layouts, and a scraper that works on one can be readily tweaked for another. but other sites are more problematic. cassey and his colleagues monitor sales of plants and animals that are either illegal or potentially harmful from an ecological perspective, and forums hosting such transactions can appear and disappear without warning, or switch their design. they tend to be much more changeable to try to restrict the ease with which off-the-shelf web scrapers can just come through and gather information, says cassey. other websites might contain encrypted html elements or complex dynamic features that are difficult to decipher. even sloppy web design can sabotage a scraping project — a problem that luscombe often grapples with when scraping government-run websites.the desired data might not be available as html-encoded text. chaowei yang, a geospatial researcher at george mason university in fairfax, virginia, oversaw the development of the covid-scraper tool, which pulls pandemic case and mortality data from around the world. he notes that in some jurisdictions, these data were locked in pdf documents and jpeg image files, which cannot be mined with conventional scraping tools. we had to find the tools that can read the data sets, and also find local volunteers to help us, says yang.once you work out how to scrape your target site, you should give thought to how to do so ethically.websites typically specify terms of service that lay out rules for data collection and reuse. these are often permissive, but not always: luscombe thinks that some sites weaponize terms to prevent good-faith research. i work against tons of powerful criminal-justice agencies that really have no interest in me having data about the race of the people that they’re arresting, he says. naturetech hubmany websites also provide ‘robots.txt’ files, which specify acceptable operating conditions for scrapers. these are designed in part to prevent automated queries overwhelming servers, but generally leave wiggle room for routine data collection. respecting these rules is considered best practice, even if it protracts the scraping process, for instance by building in delays between each page request. we don’t extract things at a rate faster than a user would, says cassey. researchers can also minimize server traffic by scheduling scraping jobs during off-peak hours, such as the middle of the night.if private and personally identifiable data are being harvested, extra precautions might be required. researchers led by cedric bousquet at the university hospital of saint-étienne in france developed a tool called vigi4med, which scrapes medical forums to identify drug-associated adverse events that might have escaped notice during clinical testing. we anonymized the user ids, and it was separated from the other data, says bissan audeh, who helped to develop the tool as a postdoctoral researcher in bousquet’s lab. the team that worked on data annotation didn’t have any access to those user names. but context clues from online posts still potentially allow the re-identification of anonymized users, she says. no anonymization is perfect.scraping projects don’t end when the harvesting is done. all of a sudden, you’re dealing with enormous amounts of unstructured data, says cassey. it becomes more of a data-processing problem than a problem of obtaining data.the johns hopkins covid dashboard, for instance, requires careful fact-checking to ensure accuracy. the team ended up developing an anomaly-detection system that flags improbable shifts in numbers. say a small county that used to report 100 cases every day reports maybe 10,000 cases, says dong. it might happen, but it’s very unlikely. such cases trigger closer inspection of the underlying data — a task that depends on a small army of multilingual volunteers who can decipher each nation’s covid-19 reports. even something as simple as a typo or change in how dates are formatted can gum up a data-analysis pipeline.for cassey’s wildlife-tracking application, determining which species are actually being sold — and whether those transactions are legal — keeps the team on its toes. if sellers know they’re breaking the law, they will often obfuscate transactions with deliberately misleading or street names for plants and animals, much like online drug dealers do. for one particular parrot species, for instance, the team has found 28 ‘trade names’, he says. a lot of fuzzy data matching and natural-language processing tools are required.still, richards says would-be scrapers shouldn’t be afraid to explore. start by repurposing an existing web scraper. richards’ team adapted its software for analysing coroners’ reports from a colleague’s tool for clinical-trials data. there’s so many platforms out there and there’s so many online resources, she says. just because you don’t have a colleague that has web-scraped before, don’t let that prevent you from giving it a go.